// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering 1`] = `
<RCTScrollView
  DEPRECATED_sendUpdatedChildFrames={false}
  alwaysBounceHorizontal={false}
  alwaysBounceVertical={true}
  data={
    Array [
      Object {
        "created_at": "2018-02-02 17:50:01",
        "description": "Test Description 1",
        "id": 1,
        "is_solve": false,
        "not_solve": false,
        "priority_id": 1,
        "problem_type_id": 1,
        "report_id": 1,
        "topic": "Test Problem 1",
        "updated_at": "2018-02-02 17:50:01",
      },
      Object {
        "created_at": "2018-02-02 17:50:02",
        "description": "Test Description 2",
        "id": 2,
        "is_solve": false,
        "not_solve": false,
        "priority_id": 2,
        "problem_type_id": 2,
        "report_id": 2,
        "topic": "Test Problem 2",
        "updated_at": "2018-02-02 17:50:02",
      },
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  numColumns={1}
  onContentSizeChange={null}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={undefined}
  onResponderTerminationRequest={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  onScrollShouldSetResponder={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  onTouchEnd={[Function]}
  onTouchMove={[Function]}
  onTouchStart={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  sendMomentumEvents={true}
  stickyHeaderIndices={Array []}
  style={
    Array [
      Object {
        "flexDirection": "column",
        "flexGrow": 1,
        "flexShrink": 1,
        "overflow": "scroll",
      },
      undefined,
    ]
  }
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <RCTScrollContentView
    collapsable={false}
    onLayout={[Function]}
    removeClippedSubviews={undefined}
    style={
      Array [
        false,
        undefined,
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={null}
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        collapsable={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#FFF",
            "borderBottomWidth": 0.4,
            "borderColor": "#C8C8C8",
            "flexDirection": "row",
            "opacity": 1,
            "paddingBottom": 10,
            "paddingLeft": 10,
            "paddingRight": 10,
            "paddingTop": 10,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {
                "flex": 0.2,
              },
              Object {
                "alignItems": "center",
              },
              Object {
                "justifyContent": "center",
              },
            ]
          }
        >
          <Image
            source={1}
            style={
              Object {
                "borderRadius": 0,
                "height": 0,
                "width": 0,
              }
            }
          />
        </View>
        <View
          style={
            Array [
              Object {
                "flex": 0.8,
              },
              Object {
                "flexDirection": "column",
              },
              Object {
                "alignItems": "flex-start",
              },
              Object {
                "justifyContent": "center",
              },
              Object {
                "paddingLeft": 10,
              },
            ]
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            numberOfLines={1}
            style={
              Array [
                Object {
                  "fontFamily": "Kanit",
                },
                Object {
                  "fontSize": 18,
                },
              ]
            }
          >
            Test Problem 1
          </Text>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            numberOfLines={2}
            style={
              Array [
                Object {
                  "fontFamily": "Kanit",
                },
                Object {
                  "fontSize": 16,
                },
                Object {
                  "color": "#858585",
                },
              ]
            }
          >
            Test Description 1
          </Text>
        </View>
      </View>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        collapsable={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#FFF",
            "borderBottomWidth": 0.4,
            "borderColor": "#C8C8C8",
            "flexDirection": "row",
            "opacity": 1,
            "paddingBottom": 10,
            "paddingLeft": 10,
            "paddingRight": 10,
            "paddingTop": 10,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {
                "flex": 0.2,
              },
              Object {
                "alignItems": "center",
              },
              Object {
                "justifyContent": "center",
              },
            ]
          }
        >
          <Image
            source={1}
            style={
              Object {
                "borderRadius": 0,
                "height": 0,
                "width": 0,
              }
            }
          />
        </View>
        <View
          style={
            Array [
              Object {
                "flex": 0.8,
              },
              Object {
                "flexDirection": "column",
              },
              Object {
                "alignItems": "flex-start",
              },
              Object {
                "justifyContent": "center",
              },
              Object {
                "paddingLeft": 10,
              },
            ]
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            numberOfLines={1}
            style={
              Array [
                Object {
                  "fontFamily": "Kanit",
                },
                Object {
                  "fontSize": 18,
                },
              ]
            }
          >
            Test Problem 2
          </Text>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            numberOfLines={2}
            style={
              Array [
                Object {
                  "fontFamily": "Kanit",
                },
                Object {
                  "fontSize": 16,
                },
                Object {
                  "color": "#858585",
                },
              ]
            }
          >
            Test Description 2
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollContentView>
</RCTScrollView>
`;
